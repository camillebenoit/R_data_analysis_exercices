function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>% select(splt, all_of(columns)) %>% slice(rows)
subset <- subset %>% group_by(subset[splt])
nosplt <- data %>% select(all_of(columns)) %>% slice(rows)
res <- list(subset)
for (col in colnames(nosplt)){
if (is.numeric(subset[[col]])){
newres <- list(subset %>% summarise(mean(!!sym(col)), .groups = 'drop'))
}else{
#newres <- list(table(subset[[col]]))
newres <- list(subest %>% summarise(n()))
}
res <- c(res, newres)
}
names(res) <- c("Subset", colnames(nosplt))
res
}
irisnew <- iris
irisnew$garden <- gl(2, 75)
function_with_dplyr(irisnew, 1:150, 3:5, mean, "garden")
function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>% select(splt, all_of(columns)) %>% slice(rows)
subset <- subset %>% group_by(subset[splt])
nosplt <- data %>% select(all_of(columns)) %>% slice(rows)
res <- list(subset)
for (col in colnames(nosplt)){
if (is.numeric(subset[[col]])){
newres <- list(subset %>% summarise(mean(!!sym(col)), .groups = 'drop'))
}else{
#newres <- list(table(subset[[col]]))
newres <- list(subset %>% summarise(n()))
}
res <- c(res, newres)
}
names(res) <- c("Subset", colnames(nosplt))
res
}
function_with_dplyr(irisnew, 1:150, 3:5, mean, "garden")
my_new_function(irisnew, , 3:5, sum, "garden" )
my_new_function(irisnew, , 3:5, mean, "garden" )
function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>% select(splt, all_of(columns)) %>% slice(rows)
subset <- subset %>% group_by(subset[splt])
nosplt <- data %>% select(all_of(columns)) %>% slice(rows)
res <- list(subset)
for (col in colnames(nosplt)){
if (is.numeric(subset[[col]])){
newres <- list(subset %>% summarise(f(!!sym(col)), .groups = 'drop'))
}else{
newres <- list(table(subset[[col]]))
}
res <- c(res, newres)
}
names(res) <- c("Subset", colnames(nosplt))
res
}
function_with_dplyr(iris, 1:150, c(1,2,3), mean, "Species")
# original wide data
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
library(tidyverse)
library(dslabs)
co2
co2
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow=TRUE)) %>% setName(1:12) %>% mutate(year = as.character(1959:1997))
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow=TRUE)) %>% setNames(1:12) %>% mutate(year = as.character(1959:1997))
co2_wide
co2_tidy <- gather(co2_wide, month, co2, -year)
co2_tidy %>% ggplot(aes(as.numeric(month), co2, color=year)) + geom_line()
data(admissions)
dat <- admissions %>% select(-applicants)
data(UCBAdmissions)
dat <- UCBAdmissions %>% select(-applicants)
UCBAdmissions
library(dslabs)
data(admissions)
AwardsPlayers
data(AwardsPlayers)
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
library(dplyr)
function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>% select(splt, all_of(columns)) %>% slice(rows)
subset <- subset %>% group_by(subset[splt])
nosplt <- data %>% select(all_of(columns)) %>% slice(rows)
res <- list(subset)
for (col in colnames(nosplt)){
if (is.numeric(subset[[col]])){
newres <- list(subset %>% summarise(f(!!sym(col)), .groups = 'drop'))
}else{
newres <- list(table(subset[[col]]), group = splt)
}
res <- c(res, newres)
}
names(res) <- c("Subset", colnames(nosplt))
res
}
function_with_dplyr(iris, 1:150, c(1,2,3), mean, "Species")
irisnew <- iris
irisnew$garden <- gl(2, 75)
function_with_dplyr(irisnew, 1:150, 3:5, mean, "garden")
function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>% select(splt, all_of(columns)) %>% slice(rows)
subset <- subset %>% group_by(subset[splt])
nosplt <- data %>% select(all_of(columns)) %>% slice(rows)
res <- list(subset)
for (col in colnames(nosplt)){
if (is.numeric(subset[[col]])){
newres <- list(subset %>% summarise(f(!!sym(col)), .groups = 'drop'))
}else{
newres <- list(table(subset[[col]]))
}
res <- c(res, newres)
}
names(res) <- c("Subset", colnames(nosplt))
res
}
function_with_dplyr(iris, 1:150, c(1,2,3), mean, "Species")
irisnew <- iris
irisnew$garden <- gl(2, 75)
function_with_dplyr(irisnew, 1:150, 3:5, mean, "garden")
irisnewgrouped <- irisnew %>% group_by(irisnew["garden", irisnew["Species"]])
irisnewgrouped <- irisnew %>% group_by(irisnew["garden"], irisnew["Species"])
new <- irisnewgrouped %>% summarise()
new
new <- irisnewgrouped[["Species"]] %>% table()
new
function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>% select(splt, all_of(columns)) %>% slice(rows)
subset <- subset %>% group_by(subset[splt])
nosplt <- data %>% select(all_of(columns)) %>% slice(rows)
res <- list(subset)
for (col in colnames(nosplt)){
if (is.numeric(subset[[col]])){
newres <- list(subset %>% summarise(f(!!sym(col)), .groups = 'drop'))
}else{
newres <- list(subset %>% summarise(table(!!sym(col)), .groups = 'drop'))
}
res <- c(res, newres)
}
names(res) <- c("Subset", colnames(nosplt))
res
}
function_with_dplyr(irisnew, 1:150, 3:5, mean, "garden")
# ----TASK 2----
my_new_function <- function(data, rows, columns, f, splt){
subset <- data[rows, columns, drop = FALSE]
spltcol <- data[rows, splt]
concat_subset <- cbind(subset, spltcol)
res <- list(subset)
for (col in colnames(subset)){
if (is.numeric(subset[[col]])){
newres <- list(tapply(X = concat_subset[[col]], INDEX = spltcol, FUN = f))
}else{
newres <- list(tapply(X = concat_subset[[col]], INDEX = spltcol, FUN = table))
}
res <- c(res, newres)
}
names(res) <- c("Subset" ,colnames(subset))
res
}
my_new_function(iris, 1:150, 2:4, sum, "Species")
my_new_function(iris, 1:150, 1:3, mean, 5)
my_new_function(iris, 6:23, c(1,2), max, 5)
irisnew <- iris
irisnew$garden <- gl(2, 75)
my_new_function(irisnew, 1:150, 3:5, mean, "garden" )
function_with_dplyr(irisnew, 1:150, 3:5, mean, "garden")
#----Task5----
head(iris)
iris_long <- iris %>% gather(measure, value, "Sepal.Length":"Species")
library(dplyr)
iris_long <- iris %>% gather(measure, value, "Sepal.Length":"Species")
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
library(dplyr)
iris_long <- iris %>% gather(measure, value, "Sepal.Length":"Species")
#----Task5----
library(tidyr)
head(iris)
iris_long <- iris %>% gather(measure, value, "Sepal.Length":"Species")
iris_long
iris_long <- iris %>% gather(measure, value, "Sepal.Length":"Petal.Width")
iris_long
head(iris_long)
iris_long <- iris %>% separate(Sepal.Length, c("part", "Lenght"), sep = ".")
head(iris_long)
head(iris)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measures"), sep = ".")
head(iris_long)
head(iris)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
iris_long <- iris_long %>% separate(measure, c("part", "measures"), sep = ".")
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
#----Task5----
library(tidyr)
head(iris)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
newiris_long <- iris_long %>% separate(measure, c("part", "measures"), sep = ".")
newiris_long
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
newiris_long <- iris_long %>% separate(measure, c("part", "measures"), sep = ".", remove = TRUE)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
newiris_long <- iris_long %>% separate(measure, c("part", "measures"), sep = "\\.", remove = TRUE)
newiris_long
#----Task5----
library(tidyr)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measures"), sep = "\\.", remove = TRUE)
head(iris_long)
#----Task5----
library(tidyr)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
head(iris_long)
iris_long <- iris_long %>%  spread(measure, values)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
iris_long <- iris_long %>%  spread(values, measure)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
iris_long <- iris_long %>%  spread(measure, values)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
head(iris_long)
iris_long <- iris_long %>%  spread(measure, values)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
head(iris_long)
iris_long <- rowid_to_column(iris_long) %>%  spread(measure, values)
library(tibble)
iris_long <- iris %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
head(iris_long)
iris_long <- rowid_to_column(iris_long) %>%  spread(measure, values)
head(iris_long)
iris_long <- rowid_to_column(iris) %>% gather(measure, values, "Sepal.Length":"Petal.Width")
head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
head(iris_long)
iris_long <- iris_long %>%  spread(measure, values)
head(iris_long)
ggplot(iris_long, aes ( x = Lenght, y = Width, color = part)) + goem_point()
source('~/ITMO/cours/R/tasks.R')
source('~/ITMO/cours/R/tasks.R')
library(ggplot2)
iris_long <- rowid_to_column(iris) %>% gather(measure, values, "Sepal.Length":"Petal.Width")
#head(iris_long)
iris_long <- iris_long %>% separate(measure, c("part", "measure"), sep = "\\.", remove = TRUE)
#head(iris_long)
iris_long <- iris_long %>%  spread(measure, values)
ggplot(iris_long, aes ( x = Lenght, y = Width, color = part)) + goem_point()
ggplot(iris_long, aes ( x = Lenght, y = Width, color = part)) + geom_point()
ggplot(iris_long, aes ( x = Length, y = Width, color = part)) + geom_point()
gapminder
Gapminder
library("gapminder")
library(gapminder)
install.packages("gapminder")
library(gapminder)
head(gapminder)
ggplot(filter(gapminder, year == 2007), aes (x= gdpPercap, y=lifeExp)) + geom_point(aes(color = continent, size = pop))
ggplot(filter(gapminder, year == 2007), aes (x= gdpPercap, y=lifeExp)) + geom_point(aes(color = continent, size = pop)) + scale_y_continuous(trans='log10')
ggplot(filter(gapminder, year == 2007), aes (x= gdpPercap, y=lifeExp)) + geom_point(aes(color = continent, size = pop)) + scale_x_continuous(trans='log10')
ggplot(filter(gapminder, year == 2007), aes (x= gdpPercap, y=lifeExp)) + geom_point(aes(color = continent, size = pop)) + scale_x_continuous(trans='log10', breaks = c(1000,10000))
head(gapminder)
meanLifeExp <- gapminder %>% tapply(FUN = mean, INDEX = continent )
meanLifeExp <- gapminder %>% tapply(FUN = mean, INDEX = gapminder$continent )
meanLifeExp <- gapminder %>% tapply(X = gapminder[[lifeExp]], FUN = mean, INDEX = gapminder$continent )
meanLifeExp <- gapminder %>% tapply(X = gapminder[["lifeExp"]], FUN = mean, INDEX = gapminder$continent )
gapminder2 <- gapminder %>% group_by(continent, year)
gapminder3 <- gapminder2 %>% summarise(mean(!!sym("lifeExp")), .groups = 'drop')
gapminder3
head(gapminder3)
gapminder3[mean(lifeExp)]
colnames(gapminder3)
colnames(gapminder3) <- c("continent", "year", "meanExpLife")
head(gapminder3)
ggplot(gapminder3, aes(x=year, y= meanLifeExp))
colnames(gapminder3) <- c("continent", "year", "meanLifeExp")
head(gapminder3)
ggplot(gapminder3, aes(x=year, y= meanLifeExp))
ggplot(gapminder3, aes(x=year, y= meanLifeExp), color= continent)
ggplot(gapminder3, aes(x=year, y= meanLifeExp), color= continent) + geom_point()
ggplot(gapminder3, aes(x=year, y= meanLifeExp)) + geom_point(aes(color = continent))
ggplot(gapminder3, aes(x=year, y= meanLifeExp)) + geom_point(aes(color = continent)) + geom_line(aes(color = continent))
gapminder4 <- gapminder2 %>% summarise(sum(!!sym("pop")), .groups = 'drop')
colnames(gapminder4) <- c("continent", "year", "totalPop")
head(gapminder4)
ggplot(gapminder4, aes(x=year, y= totalPop)) + geom_point(aes(color = continent)) + geom_line(aes(color = continent))
#B1
head(gapminder)
#B3
ggplot(gapminder, aes(x=pop, fill = continent)) + geom_bar()
#B3
ggplot(group_by(gapminder, year), aes(x=pop, fill = continent)) + geom_bar()
#B3
ggplot(gapminder, aes(x=continent)) + geom_bar()
#B3
ggplot(filter(gapminder, year == 2007), aes(x=continent)) + geom_bar()
#B3
#how many countries per continent
ggplot(filter(gapminder, year == 2007), aes(x=continent, fill = continent)) + geom_bar()
#B2
gapminder4 <- gapminder2 %>% summarise(totalPop, sum(!!sym("pop")), .groups = 'drop')
head(gapminder4)
#B2
gapminder4 <- gapminder2 %>% summarise(totalPop=  sum(!!sym("pop")), .groups = 'drop')
head(gapminder4)
ggplot(gapminder4, aes(x=year, y= totalPop)) + geom_point(aes(color = continent)) + geom_line(aes(color = continent))
#
gapminder %>% filter(year == 2007) %>% select(country, continent, pop) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop, fill = country)) + geom_bar()
#
gapminder %>% filter(year == 2007) %>% select(country, continent, pop) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop) + geom_bar()
#
gapminder %>% filter(year == 2007) %>% select(country, continent, pop) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop)) + geom_bar()
#totalpop per year
gapminder %>% filter(year == 2007) %>% select(country, continent, pop) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop)) + geom_bar()
#totalpop per year
gapminder %>% filter(year == 2007) %>% select(country, continent, pop) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop)) + geom_bar(stat =  "idendity")
#totalpop per year
gapminder %>% filter(year == 2007) %>% select(country, continent, pop) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop)) + geom_bar(stat =  "identity")
#totalpop per year
gapminder %>% filter(year == 2007) %>% select(continent, pop, country) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop, fill = country)) + geom_bar(stat =  "identity")
#totalpop per year
gapminder %>% filter(year == 2007) %>% select(continent, pop, country) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop, fill = continent)) + geom_bar(stat =  "identity")
#totalpop per continent in 2007
gapminder %>% filter(year == 2007) %>% select(continent, pop) %>%  group_by(continent) %>%  summarise(totalPop = sum(pop), .groups = "drop") %>% ggplot(aes(x=continent, y= totalPop, color = continent)) + geom_bar(stat =  "identity")
gapminder %>% filter(country == "France") %>% select(year, pop) %>% ggplot(aes(x=year, y= pop, color = year)) + geom_bar(stat =  "identity")
gapminder %>% filter(country == "France") %>% select(year, pop) %>% ggplot(aes(x=year, y= pop, fill = year)) + geom_bar(stat =  "identity")
#B1
head(gapminder)
#evolution of population in france
gapminder %>% filter(country == "France") %>% select(year, pop) %>% ggplot(aes(x=year, y= pop, fill = "blue")) + geom_bar(stat =  "identity")
#evolution of population in france
gapminder %>% filter(country == "France") %>% select(year, pop) %>% ggplot(aes(x=year, y= pop, fill = "blue", color = "orange")) + geom_bar(stat =  "identity")
#evolution of population in france
gapminder %>% filter(country == "France") %>% select(year, pop) %>% ggplot(aes(x=year, y= pop, fill = year)) + geom_bar(stat =  "identity")
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
#B1
head(gapminder)
library(gapminder)
#B1
head(gapminder)
ggplot(filter(gapminder, year == 2007), aes (x= gdpPercap, y=lifeExp)) + geom_point(aes(color = continent, size = pop)) + scale_x_continuous(trans='log10', breaks = c(1000,10000))
library(ggplot2)
#----Task5----
library(tidyr)
library(tibble)
ggplot(filter(gapminder, year == 2007), aes (x= gdpPercap, y=lifeExp)) + geom_point(aes(color = continent, size = pop)) + scale_x_continuous(trans='log10', breaks = c(1000,10000))
ggplot(filter(gapminder,year== 2007), aes (x= gdpPercap, y=lifeExp)) + geom_point(aes(color = continent, size = pop)) + scale_x_continuous(trans='log10', breaks = c(1000,10000))
head(airquality)
airquality2 <- airquality %>% gather(Measure, Value, Ozone:Temp)
head(airquality2)
ggplot(airquality2, aes(x=Day, y= Value, color = Measure)) + geom_point() + geom_line()+ facet_wrap(Measure ~ Month, nrow = 4, ncol = 5)
ggplot(airquality2, aes(x=Day, y= Value, color = Measure)) + geom_point() + geom_line()+ facet_grid(Measure ~ Month, nrow = 4, ncol = 5)
ggplot(airquality2, aes(x=Day, y= Value, color = Measure)) + geom_point() + geom_line()+ facet_grid(Measure ~ Month, scales = "free")
gapminder %>% filter(year == 2007) %>% ggplot(aes(x= population, fill = continent)) + geom_density(alpha = 0.5) + guides(fill = F) + theme_minimal()
library(dplyr)
gapminder %>% filter(year == 2007) %>% ggplot(aes(x= population, fill = continent)) + geom_density(alpha = 0.5) + guides(fill = F) + theme_minimal()
head(gapminder)
gapminder %>% filter(year == 2007) %>% ggplot(aes(x= pop, fill = continent)) + geom_density(alpha = 0.5) + guides(fill = F) + theme_minimal()
gapminder %>% filter(year == 2007) %>% ggplot(aes(x= pop, fill = continent, color = continent)) + geom_density(alpha = 0.5) + guides(fill = F) + theme_minimal() + scale_x_continuous(trans='log10', breaks = c(1000,10000))
gapminder %>% filter(year == 2007) %>% ggplot(aes(x= pop, fill = continent, color = continent)) + geom_density(alpha = 0.5) + guides(fill = F)  + scale_x_continuous(trans='log10')
gapminder %>% filter(year == 2007) %>% ggplot(aes(x= pop, fill = continent, color = continent)) + geom_density(alpha = 0.3) + guides(fill = F)  + scale_x_continuous(trans='log10')
function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>%
group_by(data[splt]) %>%
select(columns) %>%
slice(rows)
summa <- subset %>%
summarize_all(funs(if(is.numeric(.)) f(.) else table(.)))
res <- list(subset, summa)
res
}
function_with_dplyr(iris, 1:150, c(1,2,3), mean, "Species")
irisnew <- iris
irisnew$garden <- gl(2, 75)
function_with_dplyr(irisnew, 1:150, 3:5, mean, "garden")
function_with_dplyr(irisnew, 1:150, 3:5, mean, "Species")
head(irisnew)
function_with_dplyr(irisnew, 1:150, c(1,2,3, 6), mean, "Species")
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
library(dplyr)
library(ggplot2)
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data[["Type.2"]][data[["Type.2"]] == ""] <- "None"
data[["Legendary"]] <- as.logical(data[["Legendary"]])
renomme.variable(data, "X","Number")
library(rgrs)
install.packages("rgrs")
data[["Legendary"]] <- as.logical(data[["Legendary"]])
data$Number <- data$X
data <- data[,-c(data$X)]
gen1 <- data %>% filter(!grepl("Mega", Name, fixed = TRUE) & Generation == 1 & Legendary == FALSE)
head(data)
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data[["Type.2"]][data[["Type.2"]] == ""] <- "None"
data[["Legendary"]] <- as.logical(data[["Legendary"]])
data$Number <- data$X
data <- data[,-c(data$X)]
head(data)
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data[["Type.2"]][data[["Type.2"]] == ""] <- "None"
data[["Legendary"]] <- as.logical(data[["Legendary"]])
data$Number <- data$X
head(data)
data <- data[,-1]
head(data)
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data[["Type.2"]][data[["Type.2"]] == ""] <- "None"
data[["Legendary"]] <- as.logical(data[["Legendary"]])
data$Number <- data$X
data <- data[,-1] %>% select(Number, Type.1:Legendary)
head(data)
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
data$Generation <- as.factor(data$Generation)
head(data)
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data$Generation <- as.factor(data$Generation)
summary(data)
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
```{r}
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data[["Type.2"]][data[["Type.2"]] == ""] <- "None"
data[["Legendary"]] <- as.logical(data[["Legendary"]])
data$Number <- data$X
data <- data[,-1] %>% select(Number, Type.1:Legendary)
data$Generation <- as.factor(data$Generation)
head(data)
gen1 <- data %>% filter(!grepl("Mega", Name, fixed = TRUE) & Generation == 1 & Legendary == FALSE)
library(dplyr)
library(ggplot2)
library(rgrs)
gen1 <- data %>% filter(!grepl("Mega", Name, fixed = TRUE) & Generation == 1 & Legendary == FALSE)
gen1 %>%
group_by(Type.1) %>%
summarize_all(mean(if(is.numeric(.)) f(.) else table(.)))
gen1 %>%
group_by(Type.1) %>%
summarize_all(funs(if(is.numeric(.)) mean(.) else table(.)))
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data[["Type.2"]][data[["Type.2"]] == ""] <- "None"
data[["Legendary"]] <- as.logical(data[["Legendary"]])
data$Number <- data$X
data <- data[,-1] %>% select(Number, Type.1:Legendary)
data$Generation <- as.factor(data$Generation)
head(data)
data = read.csv("./project/Pokemon.csv", header = TRUE, sep = ",")
head(data)
summary(data)
data[["Type.2"]][data[["Type.2"]] == ""] <- "None"
data[["Legendary"]] <- as.logical(data[["Legendary"]])
data$Number <- data$X
data <- data[,-1] %>% select(Number, Name:Legendary)
data$Generation <- as.factor(data$Generation)
head(data)
gen1 <- data %>% filter(!grepl("Mega", Name, fixed = TRUE) & Generation == 1 & Legendary == FALSE)
gen1 %>%
select(Numer:Type.1, HP:Generation) %>%
group_by(Type.1) %>%
summarize_all(funs(if(is.numeric(.)) mean(.) else table(.)))
gen1 %>%
select(Number:Type.1, HP:Generation) %>%
group_by(Type.1) %>%
summarize_all(funs(if(is.numeric(.)) mean(.) else table(.)))
gen1 %>%
select(Type.1, HP:Speed) %>%
group_by(Type.1) %>%
summarize_all(funs(if(is.numeric(.)) mean(.) else table(.)))
.libPaths("C:/Program Files (x86)/R/win-library/4.0")
function_with_dplyr <- function(data, rows, columns, f, splt){
subset <- data %>%
group_by(data[splt]) %>%
select(columns) %>%
slice(rows)
summa <- subset %>%
summarize_all(funs(if(is.numeric(.)) f(.) else table(.)))
res <- list(subset, summa)
res
}
function_with_dplyr(iris, 1:150, c(1,2,3), mean, "Species")
irisnew <- iris
irisnew$garden <- gl(2, 75)
function_with_dplyr(irisnew, 1:150, c(1,2,3,6), mean, "Species")
